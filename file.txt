Components in React are functions or classes that return HTML (JSX) to display in the browser

how we will reuse the components with map function :-



function App() {
  const data=["hi","hello","morning"]
  return (
    <div>

     {data.map((ele,val)=>(<div  key={idex}  className="px-2  py-4 bg-zinc-300 rounded-md w-fit">{ele}</div>))}

      </div>
    
  )
}



another example:-
import React from 'react'

function Card() {

    const data=[
        { image:"https://images.unsplash.com/photo-1505142468610-359e7d316be0?w=600&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTh8fG5hdHVyZXxlbnwwfHwwfHx8MA%3D%3D",  name:"ocean",  description:"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus, qui."},

        {   image:"https://images.unsplash.com/photo-1566010503302-2564ae0d47b6?q=80&w=1170&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",  name:"clouds",  description:"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus, qui." },

        {   image:"https://images.unsplash.com/photo-1586348943529-beaae6c28db9?q=80&w=715&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",  name:"tree",  description:"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Natus, qui."}

    ]
  return (


    <div className='w-full  h-screen bg-zinc-200 flex items-center gap-10 justify-center'>
        {data.map((ele,index)=>(
            <div className='w-52  bg-zinc-100 rounded-md overflow-hidden'>
         <div className='w-full h-32  bg-zinc-300'>

            <img className='w-full h-full object-cover' src={ele.image} alt="" />
         </div>
            <div className='w-full px-2 py-4'>
                <h2 className='font-semibold'>{ele.name}</h2>
                <p className='text-xs mt-5'>{ele.description}</p>

         </div>

        </div>
        )
    )}

    </div>


  )
}

export default Card



prop warning :A message from React about props being used incorrectly or missing.
Fragments let you return multiple elements from a component without adding extra nodes to the DOM.(<> </>)





state management :-

In simple terms:

ðŸ‘‰ State management in React means handling and sharing data (state) across different parts of your app so that the UI always shows the correct, updated information.

Example:
Imagine you have a shopping cart.

The state is the number of items in the cart.

When you add/remove an item, the state changes.

State management makes sure that:

The cart icon updates with the new number.

The checkout page shows the correct items.

All components see the same updated data.

Without state management:
Data can get messy if multiple components try to handle it separately.

With state management:
Data flows in a controlled way â†’ easier to update, debug, and scale.

ðŸ”‘ In React, state can be managed using:

useState, useReducer â†’ for local state (inside one component).

Context API, Redux, Zustand, Recoil, etc. â†’ for global state (shared across many components).


const ans2=useState({name:'arun'})
    console.log(ans2)
    console.log(ans2[0])
    console.log(ans2[1])

ans2[0] â†’ { name: 'arun' }

ans2[1] â†’ function to update the state (called setState)





In React, props (short for properties) are a way to pass data from one component to another â€” usually from a parent component to a child component.

import React from 'react'

function Props({text ,colour}) {
  return (
    <button className={`${colour} px-3 p-1 text-white m-5`}>{text}</button>
  )
}

export default Props


function App() {
  
  return (
    <div>
      <Props  text="go" colour="bg-green-500"/>
      <Props  text="stop" colour="bg-red-500"/>
    </div>

  )
}


-----------------------------------------------------------------------------------------------

form handling :
in three ways 1.useref 2. usestate 3.react hooks


1.
import React, { use, useRef } from 'react'


function Formhandle() {

  const name = useRef(null);
  const age = useRef(null);
  const handlefunction=(details)=>{
    details.preventDefault();
    console.log(name.current.value, age.current.value);
    // or
   // console.log(age.current.value);
  }


  return (
    <div className='p-4'>
        <form action="" onSubmit={handlefunction}>
      <input   ref={name} className='border border-gray-300 p-2 rounded'    type="name" placeholder="Enter your name" />
      <input   ref={age} className='border border-gray-300 p-2 rounded'    type="age" placeholder="Enter your age" />
      <button  className='bg-blue-500 text-white p-2 rounded' type="submit">Submit</button>
    </form>
    </div>
  )
}

export default Formhandle




2. usestateimport React, { useState } from 'react'

function Formhandle() {


   const [val,Setvall] = useState({name:""});


   const handler=(event)=>{
    event.preventDefault();
    console.log(val);
   }



  return (
    <div className='p-4'>
        <form action="" onSubmit={handler}>
            <input  onChange={(event)=>Setvall({...val,name:event.target.value})}     type="text" placeholder="Enter your name" />
            <input  onChange={(event)=>Setvall({...val,age:event.target.value})}     type="number" placeholder="Enter your age" />

            <button type="submit">Submit</button>
        </form>
    </div>
  )
}

export default Formhandle



3.hooks

import React from 'react'
import { useForm } from 'react-hook-form'

function Formhandle() {

    const { register, handleSubmit } = useForm();
  return (
    <div className='p-4'>
        <form action="" onSubmit={handleSubmit((data) => console.log(data))}>
            <input  {...register("name")} type="text"  placeholder='name'/>
            <input {...register('age')} type="age"  placeholder='age'/>
            <input type="submit" />

        </form>
    </div>
  )
}

export default Formhandle